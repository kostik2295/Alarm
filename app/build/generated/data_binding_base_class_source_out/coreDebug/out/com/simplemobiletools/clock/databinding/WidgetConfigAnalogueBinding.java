// Generated by view binder compiler. Do not edit!
package com.simplemobiletools.clock.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AnalogClock;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.simplemobiletools.clock.R;
import com.simplemobiletools.commons.views.MySeekBar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class WidgetConfigAnalogueBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final ImageView configAnalogueBackground;

  @NonNull
  public final ImageView configAnalogueBgColor;

  @NonNull
  public final MySeekBar configAnalogueBgSeekbar;

  @NonNull
  public final RelativeLayout configAnalogueHolder;

  @NonNull
  public final Button configAnalogueSave;

  @NonNull
  public final RelativeLayout configAnalogueSeekbarHolder;

  @NonNull
  public final AnalogClock configAnalogueTime;

  @NonNull
  public final RelativeLayout configAnalogueWrapper;

  @NonNull
  public final CoordinatorLayout configCoordinator;

  private WidgetConfigAnalogueBinding(@NonNull CoordinatorLayout rootView,
      @NonNull ImageView configAnalogueBackground, @NonNull ImageView configAnalogueBgColor,
      @NonNull MySeekBar configAnalogueBgSeekbar, @NonNull RelativeLayout configAnalogueHolder,
      @NonNull Button configAnalogueSave, @NonNull RelativeLayout configAnalogueSeekbarHolder,
      @NonNull AnalogClock configAnalogueTime, @NonNull RelativeLayout configAnalogueWrapper,
      @NonNull CoordinatorLayout configCoordinator) {
    this.rootView = rootView;
    this.configAnalogueBackground = configAnalogueBackground;
    this.configAnalogueBgColor = configAnalogueBgColor;
    this.configAnalogueBgSeekbar = configAnalogueBgSeekbar;
    this.configAnalogueHolder = configAnalogueHolder;
    this.configAnalogueSave = configAnalogueSave;
    this.configAnalogueSeekbarHolder = configAnalogueSeekbarHolder;
    this.configAnalogueTime = configAnalogueTime;
    this.configAnalogueWrapper = configAnalogueWrapper;
    this.configCoordinator = configCoordinator;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static WidgetConfigAnalogueBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static WidgetConfigAnalogueBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.widget_config_analogue, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static WidgetConfigAnalogueBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.config_analogue_background;
      ImageView configAnalogueBackground = ViewBindings.findChildViewById(rootView, id);
      if (configAnalogueBackground == null) {
        break missingId;
      }

      id = R.id.config_analogue_bg_color;
      ImageView configAnalogueBgColor = ViewBindings.findChildViewById(rootView, id);
      if (configAnalogueBgColor == null) {
        break missingId;
      }

      id = R.id.config_analogue_bg_seekbar;
      MySeekBar configAnalogueBgSeekbar = ViewBindings.findChildViewById(rootView, id);
      if (configAnalogueBgSeekbar == null) {
        break missingId;
      }

      id = R.id.config_analogue_holder;
      RelativeLayout configAnalogueHolder = ViewBindings.findChildViewById(rootView, id);
      if (configAnalogueHolder == null) {
        break missingId;
      }

      id = R.id.config_analogue_save;
      Button configAnalogueSave = ViewBindings.findChildViewById(rootView, id);
      if (configAnalogueSave == null) {
        break missingId;
      }

      id = R.id.config_analogue_seekbar_holder;
      RelativeLayout configAnalogueSeekbarHolder = ViewBindings.findChildViewById(rootView, id);
      if (configAnalogueSeekbarHolder == null) {
        break missingId;
      }

      id = R.id.config_analogue_time;
      AnalogClock configAnalogueTime = ViewBindings.findChildViewById(rootView, id);
      if (configAnalogueTime == null) {
        break missingId;
      }

      id = R.id.config_analogue_wrapper;
      RelativeLayout configAnalogueWrapper = ViewBindings.findChildViewById(rootView, id);
      if (configAnalogueWrapper == null) {
        break missingId;
      }

      CoordinatorLayout configCoordinator = (CoordinatorLayout) rootView;

      return new WidgetConfigAnalogueBinding((CoordinatorLayout) rootView, configAnalogueBackground,
          configAnalogueBgColor, configAnalogueBgSeekbar, configAnalogueHolder, configAnalogueSave,
          configAnalogueSeekbarHolder, configAnalogueTime, configAnalogueWrapper,
          configCoordinator);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
