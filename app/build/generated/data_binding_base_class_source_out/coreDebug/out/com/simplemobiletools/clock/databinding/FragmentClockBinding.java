// Generated by view binder compiler. Do not edit!
package com.simplemobiletools.clock.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextClock;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.simplemobiletools.clock.R;
import com.simplemobiletools.commons.views.MyFloatingActionButton;
import com.simplemobiletools.commons.views.MyRecyclerView;
import com.simplemobiletools.commons.views.MyTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentClockBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MyTextView clockAlarm;

  @NonNull
  public final TextClock clockDate;

  @NonNull
  public final MyFloatingActionButton clockFab;

  @NonNull
  public final CoordinatorLayout clockFragment;

  @NonNull
  public final RelativeLayout clockHolder;

  @NonNull
  public final TextClock clockTime;

  @NonNull
  public final MyRecyclerView timeZonesList;

  private FragmentClockBinding(@NonNull CoordinatorLayout rootView, @NonNull MyTextView clockAlarm,
      @NonNull TextClock clockDate, @NonNull MyFloatingActionButton clockFab,
      @NonNull CoordinatorLayout clockFragment, @NonNull RelativeLayout clockHolder,
      @NonNull TextClock clockTime, @NonNull MyRecyclerView timeZonesList) {
    this.rootView = rootView;
    this.clockAlarm = clockAlarm;
    this.clockDate = clockDate;
    this.clockFab = clockFab;
    this.clockFragment = clockFragment;
    this.clockHolder = clockHolder;
    this.clockTime = clockTime;
    this.timeZonesList = timeZonesList;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentClockBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentClockBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_clock, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentClockBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.clock_alarm;
      MyTextView clockAlarm = ViewBindings.findChildViewById(rootView, id);
      if (clockAlarm == null) {
        break missingId;
      }

      id = R.id.clock_date;
      TextClock clockDate = ViewBindings.findChildViewById(rootView, id);
      if (clockDate == null) {
        break missingId;
      }

      id = R.id.clock_fab;
      MyFloatingActionButton clockFab = ViewBindings.findChildViewById(rootView, id);
      if (clockFab == null) {
        break missingId;
      }

      CoordinatorLayout clockFragment = (CoordinatorLayout) rootView;

      id = R.id.clock_holder;
      RelativeLayout clockHolder = ViewBindings.findChildViewById(rootView, id);
      if (clockHolder == null) {
        break missingId;
      }

      id = R.id.clock_time;
      TextClock clockTime = ViewBindings.findChildViewById(rootView, id);
      if (clockTime == null) {
        break missingId;
      }

      id = R.id.time_zones_list;
      MyRecyclerView timeZonesList = ViewBindings.findChildViewById(rootView, id);
      if (timeZonesList == null) {
        break missingId;
      }

      return new FragmentClockBinding((CoordinatorLayout) rootView, clockAlarm, clockDate, clockFab,
          clockFragment, clockHolder, clockTime, timeZonesList);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
